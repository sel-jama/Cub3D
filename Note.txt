Notes : 






1
https://lodev.org/cgtutor/images/raycastdelta.gif

The ray starts at the position of the player (posX, posY)

sideDistX and sideDistY are initially the distance the ray has to travel from its start position to the first x-side and the first y-side. Later in the code they will be incremented while steps are taken.

deltaDistX and deltaDistY are the distance the ray has to travel to go from 1 x-side to the next x-side, or from 1 y-side to the next y-side. The following image shows the initial sideDistX, sideDistY and deltaDistX and deltaDistY:

deltaDistX = abs(1 / rayDirX)
deltaDistY = abs(1 / rayDirY)

The DDA algo:
Wich box of the map we're in : int mapX = int(posX) -  int mapY = int(posY)


      //length of ray from current position to next x or y-side
      double sideDistX;
      double sideDistY;

       //length of ray from one x or y-side to next x or y-side
      double deltaDistX = (rayDirX == 0) ? 1e30 : std::abs(1 / rayDirX);
      double deltaDistY = (rayDirY == 0) ? 1e30 : std::abs(1 / rayDirY);
      double perpWallDist;

      //what direction to step in x or y-direction (either +1 or -1)
      int stepX
	  int stepY;

      int hit = 0; //was there a wall hit?
      int side; //was a NS or a EW wall hit?

PS : 1e30 is an arbitrarily chosen high enough number and can be set to Infinity if your programming language supports assiging that value.

 

 _____________________________________________________________________________________________________________________________________________________

 So a quick summary of what we now have:

Projection Plane = 320 pixels in width by 200 pixels in height.
Field of View = 60 degrees
The size of everything is 64 pixels: So walls are 64 pixels by 64 pixels, sprites are also 64 x 64 pixels.
Player height is 32 pixels.
Angle between columns of projection plane = 60 degrees / 320 pixels = 0.1875 degrees per column of pixels.
Distance to projection plane = (projection_plane.width / 2) / tan(fov / 2) = 160 / tan(30) = about 277 pixels.


curr_ray_angle = theta - 30
For each column of pixels in our projection plane:
	-Fire a ray that starts from the player and travels along the angle curr_ray_angle
	-If this hits a part of a wall, render that part of the wall.
	-curr_ray_angle += 0.1875 degrees


